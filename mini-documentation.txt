#1. Global Styles with Styled Components:

Example: GlobalStyles.js file, the apply method in App.jsx

NOTE: 'GlobalStyles' does NOT accept any children components, so it must be just sibling component.

#2. &:

&: simply selects the currently selected element. Same thing as writing like html_element:hover.

Example: Button.jsx file.

#3. css:
If we make some styling in separate variables, the syntax will NOT be highlighted. To make it highlighting, use 'css'.

Example: Heading.jsx file

#4. Props in Styled Components:
In App.jsx we are passing some props to Heading styled component. And in Heading.jsx we are accepting these props and do some operations.

NOTE: 'as' props. This prop is a part of Styled Components and needed to render this component AS some_html_element, it's very crucial for SEO and accessibility.

#5. Default Props:
On any React Styled Components, you can make some default props, so by default it will apply these default props. 

Example: Row.jsx file

#6. Styling 3rd-party components:
When some components are coming from 3rd-party libraries and we need to style them, then pass this component like this => const StyledSomething = styled(3rd_party_component);

Example: MainNav.jsx file

#7 supabase.js:
It's a client, where we will initialize the 'supabase' API and create a client so that we can then start querying the database.

NOTE: if someone decides to steal supabaseKey, he/she can do nothing because of RLS policy. They could do what we allowed in the RLS policy.

#8. apiCabins.js:
For each of services we will create one service, there we will have a bunch of functions.

- const { data, error } = await supabase.from("cabins").select("*");
From 'supabase' client we can now create queries with the 'from' method, then we specify the name of the table and the fields that we want. This returns a promise which we await and the result of that gives us data & error. * - means all.

This service can be used anywhere in the application.

Example: services folder => apiCabins.js file

#9. React Query:
We set up the cache and the query client using 'newQueryClient'. Later provide it to the application by using 'QueryClientProvider'.

Stale Time - is the amount of time that the data in the cache will stay fresh (will stay valid until it's refetched).

React Query DevTools: npm i @tanstack/react-query-devtools

Example: App.jsx file

#10. useQuery():

useQuery()
-> A hook that fetches and caches data.
-> Automatically manages data fetching, caching, and updating.
-> Takes queryKey (unique identifier) and queryFn (function to fetch data).

queryFn - responsible for querying (fetching data). The function that's specified here, must return a promise.

Example: CabinTable.jsx file

#11. useMutation():

Purpose:
-> Manages side effects like creating, updating, or deleting data on the server.

Functionality:
-> Takes a mutation function (mutationFn) that performs the side effect.
-> Returns status and helper methods (isLoading, error, data, mutate) to manage and execute the mutation.

Usage:
-> Call the 'mutate' method to execute the mutation function.
-> Handles the loading state, success, and error responses automatically.

'mutate' - is a callback function that we can connect with something.

'onSuccess' - tells React Query what to do as soon as mutation was successful. But there are also other statuses.

Example: CabinRow.jsx file, CreateCabinForm.jsx file

#12. react-hot-toast:
Install: npm i react-hot-toast

'gutter' - space between window and toaster

Example: App.jsx (implementation), CabinRow.jsx (usage)

#13. React Hook Form:

useForm() - gives a few functions that we can use. The most fundamental is 'register', 'handleSubmit'.

{...register("name_of_input", {some_options})}

One of fundamental things about React Hook Form is to essentially register inputs.

1st step - is to register all input fields that we want React Hook Form to handle.
2nd step - is to specify onSubmit={handleSubmit(our_submit_function, our_errors_function)} on form.

'data' - is all the data from input fields that we registered.

Example: CreateCabin.jsx file