#1. Global Styles with Styled Components:

Example: GlobalStyles.js file, the apply method in App.jsx

NOTE: 'GlobalStyles' does NOT accept any children components, so it must be just sibling component.

#2. &:

&: simply selects the currently selected element. Same thing as writing like html_element:hover.

Example: Button.jsx file.

#3. css:
If we make some styling in separate variables, the syntax will NOT be highlighted. To make it highlighting, use 'css'.

Example: Heading.jsx file

#4. Props in Styled Components:
In App.jsx we are passing some props to Heading styled component. And in Heading.jsx we are accepting these props and do some operations.

NOTE: 'as' props. This prop is a part of Styled Components and needed to render this component AS some_html_element, it's very crucial for SEO and accessibility.

#5. Default Props:
On any React Styled Components, you can make some default props, so by default it will apply these default props. 

Example: Row.jsx file

#6. Styling 3rd-party components:
When some components are coming from 3rd-party libraries and we need to style them, then pass this component like this => const StyledSomething = styled(3rd_party_component);

Example: MainNav.jsx file

#7 supabase.js:
It's a client, where we will initialize the 'supabase' API and create a client so that we can then start querying the database.

NOTE: if someone decides to steal supabaseKey, he/she can do nothing because of RLS policy. They could do what we allowed in the RLS policy.

#8. apiCabins.js:
For each of services we will create one service, there we will have a bunch of functions.

- const { data, error } = await supabase.from("cabins").select("*");
From 'supabase' client we can now create queries with the 'from' method, then we specify the name of the table and the fields that we want. This returns a promise which we await and the result of that gives us data & error. * - means all.

This service can be used anywhere in the application.

Example: services folder => apiCabins.js file